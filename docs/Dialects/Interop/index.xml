<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Interop Dialect on CIRCT</title><link>https://circt.llvm.org/docs/Dialects/Interop/</link><description>Recent content in Interop Dialect on CIRCT</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Jan 1970 00:00:00 +0000</lastBuildDate><atom:link href="https://circt.llvm.org/docs/Dialects/Interop/index.xml" rel="self" type="application/rss+xml"/><item><title>Interoperability Dialect Rationale</title><link>https://circt.llvm.org/docs/Dialects/Interop/RationaleInterop/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Interop/RationaleInterop/</guid><description>This document describes the various design points of the Interop dialect, a dialect that is used to represent partially lowered interoperability layers and that provides common interfaces and utilities for automated interop generation. This follows in the spirit of other MLIR Rationale docs.
Interoperability Dialect Rationale Introduction Procedural Interop Representing Partial Lowerings Interop Mechanisms Instance-side Lowering Container-side Lowering Bridging between Interop Mechanisms How to use this dialect Design considerations Introduction The increasing number of CIRCT-based backends as well as the usage of many external tools raises questions about interoperability and composition of those tools.</description></item></channel></rss>