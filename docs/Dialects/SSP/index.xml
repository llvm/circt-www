<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>'ssp' Dialect on CIRCT</title><link>https://circt.llvm.org/docs/Dialects/SSP/</link><description>Recent content in 'ssp' Dialect on CIRCT</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Jan 1970 00:00:00 +0000</lastBuildDate><atom:link href="https://circt.llvm.org/docs/Dialects/SSP/index.xml" rel="self" type="application/rss+xml"/><item><title>SSP Dialect Rationale</title><link>https://circt.llvm.org/docs/Dialects/SSP/RationaleSSP/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/SSP/RationaleSSP/</guid><description>This document describes various design points of the SSP dialect, why they are the way they are, and current status. This follows in the spirit of other MLIR Rationale docs.
Introduction CIRCT&amp;rsquo;s scheduling infrastructure is lightweight and dialect-agnostic, in order to fit into any lowering flow with a need for static scheduling. However, it lacks an import/export format for storing and exchanging problem instances. The SSP (&amp;quot;Static Scheduling Problems&amp;quot;) dialect fills that role by defining an IR that captures problem instances</description></item></channel></rss>