<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dialects on CIRCT</title><link>https://circt.llvm.org/docs/Dialects/</link><description>Recent content in Dialects on CIRCT</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Jan 1970 00:00:00 +0000</lastBuildDate><atom:link href="https://circt.llvm.org/docs/Dialects/index.xml" rel="self" type="application/rss+xml"/><item><title>'calyx' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Calyx/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Calyx/</guid><description>Types and operations for the Calyx dialect Calyx is an intermediate language and infrastructure for building compilers that generate custom hardware accelerators. For more information, visit the documentation.
Operation definition calyx.std_add (::circt::calyx::AddLibOp) calyx.std_and (::circt::calyx::AndLibOp) calyx.assign (::circt::calyx::AssignOp) calyx.comb_group (::circt::calyx::CombGroupOp) calyx.component (::circt::calyx::ComponentOp) calyx.control (::circt::calyx::ControlOp) calyx.std_divs_pipe (::circt::calyx::DivSPipeLibOp) calyx.std_divu_pipe (::circt::calyx::DivUPipeLibOp) calyx.enable (::circt::calyx::EnableOp) calyx.std_eq (::circt::calyx::EqLibOp) calyx.std_extsi (::circt::calyx::ExtSILibOp) calyx.std_ge (::circt::calyx::GeLibOp) calyx.group_done (::circt::calyx::GroupDoneOp) calyx.group_go (::circt::calyx::GroupGoOp) calyx.group (::circt::calyx::GroupOp) calyx.std_gt (::circt::calyx::GtLibOp) calyx.if (::circt::calyx::IfOp) calyx.instance (::circt::calyx::InstanceOp) calyx.std_le (::circt::calyx::LeLibOp) calyx.std_lsh (::circt::calyx::LshLibOp) calyx.</description></item><item><title>'chirrtl' Dialect</title><link>https://circt.llvm.org/docs/Dialects/CHIRRTL/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/CHIRRTL/</guid><description>Types and operations for the chirrtl dialect This dialect defines the chirrtl dialect, which contains high-level memory defintions which can be lowered to FIRRTL.
Operation definition chirrtl.combmem (::circt::chirrtl::CombMemOp) chirrtl.memoryport.access (::circt::chirrtl::MemoryPortAccessOp) chirrtl.memoryport (::circt::chirrtl::MemoryPortOp) chirrtl.seqmem (::circt::chirrtl::SeqMemOp) Type definition CMemoryPortType CMemoryType Operation definition chirrtl.combmem (::circt::chirrtl::CombMemOp) Define a new combinational memory
Syntax:
operation ::= `chirrtl.combmem` (`sym` $inner_sym^)? custom&amp;lt;NameKind&amp;gt;($nameKind) custom&amp;lt;CombMemOp&amp;gt;(attr-dict) `:` qualified(type($result)) Define a new behavioral combinational memory. Combinational memories have a write latency of 1 and a read latency of 0.</description></item><item><title>'llhd' Dialect</title><link>https://circt.llvm.org/docs/Dialects/LLHD/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/LLHD/</guid><description>A low-level hardware description dialect in MLIR.
Operation definition llhd.con (::circt::llhd::ConnectOp) llhd.constant_time (::circt::llhd::ConstantTimeOp) llhd.drv (::circt::llhd::DrvOp) llhd.entity (::circt::llhd::EntityOp) llhd.halt (::circt::llhd::HaltOp) llhd.inst (::circt::llhd::InstOp) llhd.load (::circt::llhd::LoadOp) llhd.output (::circt::llhd::OutputOp) llhd.prb (::circt::llhd::PrbOp) llhd.proc (::circt::llhd::ProcOp) llhd.ptr.array_get (::circt::llhd::PtrArrayGetOp) llhd.ptr.array_slice (::circt::llhd::PtrArraySliceOp) llhd.ptr.extract (::circt::llhd::PtrExtractOp) llhd.ptr.struct_extract (::circt::llhd::PtrStructExtractOp) llhd.reg (::circt::llhd::RegOp) llhd.shl (::circt::llhd::ShlOp) llhd.shr (::circt::llhd::ShrOp) llhd.sig.array_get (::circt::llhd::SigArrayGetOp) llhd.sig.array_slice (::circt::llhd::SigArraySliceOp) llhd.sig.extract (::circt::llhd::SigExtractOp) llhd.sig (::circt::llhd::SigOp) llhd.sig.struct_extract (::circt::llhd::SigStructExtractOp) llhd.store (::circt::llhd::StoreOp) llhd.var (::circt::llhd::VarOp) llhd.wait (::circt::llhd::WaitOp) Attribute definition TimeAttr Type constraint definition LLHD time type Type definition PtrType SigType TimeType Operation definition llhd.</description></item><item><title>'moore' Dialect</title><link>https://circt.llvm.org/docs/Dialects/Moore/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/Moore/</guid><description>Types and operations for Moore dialect This dialect defines the moore dialect, which represents various SystemVerilog-specific constructs without ambiguities and all types resolved.
Operation definition moore.mir.assign (::circt::moore::AssignOp) moore.mir.concat (::circt::moore::ConcatOp) moore.mir.constant (::circt::moore::ConstantOp) moore.mir.shl (::circt::moore::ShlOp) moore.mir.shr (::circt::moore::ShrOp) moore.mir.vardecl (::circt::moore::VariableDeclOp) Type constraint definition an SystemVerilog int packed type simple bit vector type unpacked type Type definition LValueType Operation definition moore.mir.assign (::circt::moore::AssignOp) Continuous assignment
Syntax:
operation ::= `moore.mir.assign` $dest `,` $src attr-dict `:` qualified(type($src)) A SystemVerilog assignment statement &amp;lsquo;x = y;&amp;rsquo;.</description></item><item><title>'msft' Dialect</title><link>https://circt.llvm.org/docs/Dialects/MSFT/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/MSFT/</guid><description>Microsoft internal support dialect Umbrella dialect for everything needed to support Microsoft development but not thoroughly discussed. Most (if not everything) in this dialect is a candidate for generalization and re-homing.
Operation definition msft.constructs.channel (::circt::msft::ChannelOp) msft.physical_region (::circt::msft::DeclPhysicalRegionOp) msft.partition (::circt::msft::DesignPartitionOp) msft.instance.dynamic (::circt::msft::DynamicInstanceOp) msft.instance.verb_attr (::circt::msft::DynamicInstanceVerbatimAttrOp) msft.entity.extern (::circt::msft::EntityExternOp) msft.instance.hierarchy (::circt::msft::InstanceHierarchyOp) msft.instance (::circt::msft::InstanceOp) msft.module.extern (::circt::msft::MSFTModuleExternOp) msft.module (::circt::msft::MSFTModuleOp) msft.output (::circt::msft::OutputOp) msft.pd.location (::circt::msft::PDPhysLocationOp) msft.pd.physregion (::circt::msft::PDPhysRegionOp) msft.pd.reg_location (::circt::msft::PDRegPhysLocationOp) msft.pe.output (::circt::msft::PEOutputOp) msft.systolic.array (::circt::msft::SystolicArrayOp) Attribute definition AppIDAttr LocationVectorAttr PhysLocationAttr PhysicalBoundsAttr Operation definition msft.</description></item><item><title>'staticlogic' Dialect</title><link>https://circt.llvm.org/docs/Dialects/StaticLogic/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://circt.llvm.org/docs/Dialects/StaticLogic/</guid><description>Operation definition staticlogic.pipeline (::circt::staticlogic::PipelineOp) staticlogic.pipeline.register (::circt::staticlogic::PipelineRegisterOp) staticlogic.pipeline.stage (::circt::staticlogic::PipelineStageOp) staticlogic.pipeline.terminator (::circt::staticlogic::PipelineTerminatorOp) staticlogic.pipeline.while (::circt::staticlogic::PipelineWhileOp) staticlogic.return (::circt::staticlogic::ReturnOp) Operation definition staticlogic.pipeline (::circt::staticlogic::PipelineOp) pipeline operation
The &amp;ldquo;staticlogic.pipeline&amp;rdquo; operation represents a statically scheduled pipeline stucture which contains several MLIR blocks. Each MLIR block is corresponding to a pipeline stage.
Interfaces: NoSideEffect (MemoryEffectOpInterface)
Effects: MemoryEffects::Effect{}
Operands: Operand Description «unnamed» any type Results: Result Description «unnamed» any type staticlogic.pipeline.register (::circt::staticlogic::PipelineRegisterOp) StaticLogic dialect pipeline register.
Syntax:
operation ::= `staticlogic.</description></item></channel></rss>